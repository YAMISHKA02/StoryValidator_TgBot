// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ
import axios from 'axios';
async function getValidatorInfo(operatorAddress, ctx) {
    try {
        // –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ
        const data = await fetchValidatorData(operatorAddress);
        if (!data) {
            ctx.reply("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ.");
            return;
        }

        const { rank, jailed, tokens, bondStatus, uptime, commission, votingPowerPercent } = data;

        // –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
        const uptimeData = await fetchUptimeData(operatorAddress);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ uptimeData —ç—Ç–æ –º–∞—Å—Å–∏–≤
        if (!Array.isArray(uptimeData)) {
            ctx.reply("üö® –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.");
            return;
        }

        // –ü–æ–¥—Å—á—ë—Ç —É–¥–∞—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤
        const successfulBlocks = uptimeData.filter(item => item.signed).length;

        // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–æ–≤
        const blockVisualization = uptimeData.map(item => (item.signed ? 'üü©' : 'üü•')).join('');

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        const message = `‚ú® *Validator Info* ‚ú®\n\n` +
                        `*${operatorAddress}*\n\n` +  // –ê–¥—Ä–µ—Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                        `üîπ *Rank:* ${rank}\n` +
                        `üîπ *Jailed:* ${jailed ? '‚ùå JAILED' : '‚úÖ Free'}\n` +
                        `üîπ *Tokens:* ${tokens.toLocaleString()}\n` +
                        `üîπ *Bound Status:* ${bondStatus}\n` +
                        `üîπ *Uptime:* ${uptime}%\n` +
                        `üîπ *Comission:* ${commission}%\n` +
                        `üîπ *Voting Power:* ${votingPowerPercent}%\n` +
                        `üîπ *Successful blocks :* *${successfulBlocks}/100*\n\n` + 
                        `Latest 100 blocks:\n\n` + 
                        `${blockVisualization}`;  // –≠–º–æ–¥–∑–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–æ–≤

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        ctx.reply(message, { parse_mode: "Markdown" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:", error.message);
        ctx.reply("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–¥–∞—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤
async function fetchUptimeData(operatorAddress) {
    try {
        const response = await axios.get(`https://testnet.story.api.explorers.guru/api/v1/validators/${operatorAddress}/uptime?limit=100`);
        return response.data;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞:", error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ –ø–æ API
async function fetchValidatorData(operatorAddress) {
    try {
        const response = await axios.get(`https://testnet.story.api.explorers.guru/api/v1/validators`);
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω return –≤ —Ñ–∏–ª—å—Ç—Ä–µ
        const validatorData = response.data.filter(item => item.operatorAddress === operatorAddress);
        
        console.log("–î–∞–Ω–Ω—ã–µ –æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ:", validatorData); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        return validatorData.length > 0 ? validatorData[0] : null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–ª–∏ null
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ:", error.message);
        return null;
    }
}



export  {
    getValidatorInfo
};